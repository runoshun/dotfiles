# binds
if [ "$PS1" ]; then
    bind '"\C-n": history-search-forward'
    bind '"\C-p": history-search-backward'
    bind '"\e[A": history-search-backward'
    bind '"\e[B": history-search-forward'
fi

# User specific aliases and functions
alias python=python3
alias cg="cd \$(git rev-parse --show-toplevel)"
alias cat="bat"

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# functions
extract() {
    if [ -f $1 ]; then
        case $1 in
        *.tar.bz2) tar xvjf $1 ;;
        *.tar.gz) tar xvzf $1 ;;
        *.bz2) bunzip2 $1 ;;
        *.tar.xz) tar -Jxvf $1 ;;
        *.rar) unrar x $1 ;;
        *.gz) gunzip $1 ;;
        *.tar) tar xvf $1 ;;
        *.tbz2) tar xvjf $1 ;;
        *.tgz) tar xvzf $1 ;;
        *.zip) unzip $1 ;;
        *.Z) uncompress $1 ;;
        *.7z) 7z x $1 ;;
        *) echo "don't know how to extract '$1'..." ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}
compress() {
    if [ $# -ge 2 ]; then
        archive=$1
        shift
        case $archive in
        *.tar.gz) tar zcvf $archive $@ ;;
        *.tgz) tar zcvf $archive $@ ;;
        *.tar.bz2) tar Icvf $archive $@ ;;
        *.tbz) tar Icvf $archive $@ ;;
        *.tar.xz) tar -Jcvf $archive $@ ;;
        *.bz2) bzip2 $1 ;;
        *.gz) gzip $1 ;;
        *.rar) rar a $archive $@ ;;
        *.tar) tar cvf $1 $@ ;;
        *.zip) zip $archive $@ ;;
        *.7z) 7z a $archive $@ ;;
        *) echo "don't know how to compress '$archive' ..." ;;
        esac
    else
        echo "args is not a valid!"
        echo "usage: compress <archive> <file> ..."
    fi
}

if [ -f ~/.env ]; then
    set -a && source ~/.env && set +a
fi

if [ -f ~/.local/bin/mise ]; then
    eval "$(~/.local/bin/mise activate bash)"
    eval "$(mise exec starship -- starship init bash)"
fi

if [ -f /opt/homebrew/etc/bash_completion ]; then
    source /opt/homebrew/etc/bash_completion
fi
if [ -f /etc/bash_completion ]; then
    source /etc/bash_completion
fi

if [ -f ~/.fzf.bash ]; then
    export FZF_DEFAULT_OPTS='--tmux 80% --layout reverse --border'
    export FZF_ALT_C_OPTS="--walker-skip .git,node_modules,target,.venv,.android,wine-root --preview 'tree -C {}'"
    source ~/.fzf.bash
fi

if command -v chezmoi &>/dev/null; then
    alias ch="chezmoi"
    alias che="chezmoi edit"
    alias cha="chezmoi apply"
    alias chc="chezmoi cd"
    alias chu="chezmoi update"
    alias chg="chezmoi git"
    chp() {
        chezmoi git diff
        read -p "ok? (y/N): " yn
        case "$yn" in
        [yY]*) ;;
        *) return ;;
        esac
        chezmoi git add .
        chezmoi git commit -- -m "$(chezmoi generate git-commit-message)"
        chezmoi git push origin main
    }
fi

alias awsume=". awsume"
alias mr='mise r'
alias mx='mise x'

alias mn='memo n'
alias mm='memo today'
alias mf='memo b'

if command -v aws_completer &>/dev/null; then
    complete -C "$(which aws_completer)" aws
    complete -C "$(which aws_completer)" awslocal
fi

aws-auto-profiles() {
    awsume marine-conv-dev -a -o marine-conv-dev-auto
    awsume study -a -o study-auto
    awsume study -a -o bedrock
}

auto-dev-instance() {
    aws-auto-profiles
    ssh study-dev-instance-launch
}

auto-marine-dev-instance() {
    aws-auto-profiles
    autossh -M 0 -N -f -o "ServerAliveInterval 30" -o "ServerAliveCountMax 3" marine-dev-instance-launch
}

portforwarding-daemon() {
    deno run --A https://raw.githubusercontent.com/runoshun/port-forwarding-daemon/refs/heads/main/main.ts
}

portforward-dev() {
    autossh -M 0 -Nf -o "ServerAliveInterval 30" -o "ServerAliveCountMax 3" \
        -L 8080:localhost:8080 \
        -L 8089:localhost:8089 \
        -L 8888:localhost:8888 \
        -L 5173:localhost:5173 \
        -L 8000:localhost:8000 \
        -L 1080:localhost:1080 \
        -L 8787:localhost:8787 \
        "$1"
}

attach-dev-container() {
    res=$(npx @devcontainers/cli up --workspace-folder ./ --dotfiles-repository https://github.com/runoshun/dotfiles)
    devcon_json=$(cat .devcontainer/devcontainer.json)

    if [ "$(echo "$res" | jq -r .outcome)" == "success" ]; then
        wf=$(echo "$devcon_json" | jq -r '. | .workspaceFolder // "/workspace"')
        ci=$(echo "$res" | jq -r .containerId)
        docker exec -it -w "$wf" "$ci" bash
    else
        echo "$res"
    fi
}

delete-default-vpcs() {
    aws --output text ec2 describe-regions --query "Regions[].[RegionName]" \
    | while read region; do
        aws --region ${region} --output text \
          ec2 describe-vpcs --query "Vpcs[?IsDefault].[VpcId]" \
        | while read vpc; do
          echo "# deleting vpc: ${vpc} in ${region}"
         
          ### IGW
          aws --region ${region} --output text \
            ec2 describe-internet-gateways --filters Name=attachment.vpc-id,Values=${vpc} \
            --query "InternetGateways[].[InternetGatewayId]" \
          | while read igw; do
            echo "## deleting igw: ${igw} in ${vpc}, ${region}"
            echo "--> detatching"
            aws --region ${region} --output json \
              ec2 detach-internet-gateway --internet-gateway-id ${igw} --vpc-id ${vpc}
            echo "--> deleteing"
            aws --region ${region} --output json \
              ec2 delete-internet-gateway --internet-gateway-id ${igw}
          done
         
          ### Subnet
          aws --region ${region} --output text \
            ec2 describe-subnets  --filters Name=vpc-id,Values=${vpc} \
            --query "Subnets[].[SubnetId]" \
          | while read subnet; do
            echo "## deleting subnet: ${subnet} in ${vpc}, ${region}"
            aws --region ${region} --output json \
              ec2 delete-subnet --subnet-id ${subnet}
          done
         
          ### VPC
          echo "## finally, deleting vpc: ${vpc} in ${region}"
          aws --region ${region} --output json \
            ec2 delete-vpc --vpc-id ${vpc}  
        done
    done
}

eval "$(mise x zoxide -- zoxide init bash)"

# vim: set ft=bash :
